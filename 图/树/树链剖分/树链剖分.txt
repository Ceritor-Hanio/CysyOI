var n,m,i,x,y,z,tot:longint;
    a,la:array[0..300000,1..4] of longint;
    first,siz,dep,fa,son,w,top:array[0..200000] of longint;
procedure dfs_1(x:longint);
var y,ms:longint;
begin
  y:=first[x];
  siz[x]:=1;
  ms:=0;
  while y<>0 do begin
    if la[y,2]<>fa[x] then begin
      dep[la[y,2]]:=dep[x]+1;
      fa[la[y,2]]:=x;
      dfs_1(la[y,2]);
      inc(siz[x],siz[la[y,2]]);
      if siz[la[y,2]]>ms then begin
        son[x]:=la[y,2];
        ms:=siz[la[y,2]];
      end;
    end;
    y:=la[y,1];
  end;
end;
procedure dfs_2(x:longint);
var y:longint;
begin
  if son[x]<>0 then begin
    inc(tot);
    w[son[x]]:=tot;
    top[son[x]]:=top[x];
    dfs_2(son[x]);
    y:=first[x];
    while y<>0 do begin
      if (la[y,2]<>son[x]) and (la[y,2]<>fa[x]) then begin
        inc(tot);
        w[la[y,2]]:=tot;
        top[la[y,2]]:=la[y,2];
        dfs_2(la[y,2]);
      end;
      y:=la[y,1];
    end;
  end;
end;
procedure build(num,l,r:longint);
var mid:longint;
begin
  a[num,1]:=l;
  a[num,2]:=r;
  a[num,3]:=0;
  if l<r then begin
    mid:=(l+r) div 2;
    build(2*num,l,mid);
    build(2*num+1,mid+1,r);
  end;
end;
procedure add(num,l,r:longint);
var mid,s,t:longint;
begin
  if l>r then begin
    t:=l; l:=r; r:=t;
  end;
  if (l<=a[num,1]) and (r>=a[num,2]) then begin
    inc(a[num,4]);
    exit;
  end;
  mid:=(a[num,1]+a[num,2]) div 2;
  if l<=mid then add(2*num,l,r);
  if r>mid then add(2*num+1,l,r);
  s:=a[2*num,2]-a[2*num,1]+1;
  a[num,3]:=a[2*num,3]+a[2*num,4]*s;
  s:=a[2*num+1,2]-a[2*num+1,1]+1;
  inc(a[num,3],a[2*num+1,3]+a[2*num+1,4]*s);
end;
function q(num,l,r:int64):int64;
var s,mid,ret,t:int64;
begin
  if l>r then begin
    t:=l; l:=r; r:=t;
  end;
  ret:=0;
  s:=a[num,2]-a[num,1]+1;
  if (a[num,1]>=l) and (a[num,2]<=r) then exit(a[num,3]+a[num,4]*s);
  mid:=(a[num,1]+a[num,2]) div 2;
  inc(a[num,3],a[num,4]*s);
  inc(a[2*num,4],a[num,4]);
  inc(a[2*num+1,4],a[num,4]);
  a[num,4]:=0;
  if l<=mid then inc(ret,q(2*num,l,r));
  if r>mid then inc(ret,q(2*num+1,l,r));
  exit(ret);
end;
procedure change(u,v:longint);
var f1,f2:longint;
begin
  f1:=top[u];
  f2:=top[v];
  while f1<>f2 do
  if dep[f1]>=dep[f2] then begin
    add(1,w[u],w[f1]);
    u:=fa[f1];
    f1:=top[u];
  end else begin
    add(1,w[v],w[f2]);
    v:=fa[f2];
    f2:=top[v];
  end;
  add(1,w[u],w[v]);
end;
function get_sum(u,v:longint):longint;
var f1,f2,sum:longint;
begin
  sum:=0;
  f1:=top[u];
  f2:=top[v];
  while f1<>f2 do
  if dep[f1]>=dep[f2] then begin
    inc(sum,q(1,w[u],w[f1]));
    u:=fa[f1];
    f1:=top[u];
  end else begin
    inc(sum,q(1,w[v],w[f2]));
    v:=fa[f2];
    f2:=top[v];
  end;
  inc(sum,q(1,w[u],w[v]));
  exit(sum);
end;
begin
  readln(n);
  tot:=0;
  for i:=1 to n-1 do begin
    readln(x,y);
    inc(tot);
    la[tot,2]:=y;
    la[tot,1]:=first[x];
    first[x]:=tot;
    inc(tot);
    la[tot,2]:=x;
    la[tot,1]:=first[y];
    first[y]:=tot;
  end;
  dep[1]:=1;
  dfs_1(1);
  tot:=1; top[1]:=1; w[1]:=1;
  dfs_2(1);
  build(1,1,n);
  readln(m);
  for i:=1 to m do begin
     readln(x,y,z);
     if x=1 then change(y,z)
     else writeln(get_sum(y,z));
  end;
end.
