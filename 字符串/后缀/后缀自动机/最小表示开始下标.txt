var
  s:ansistring;
  son:array[0..10000,1..26]of longint;
  pre,step:array[0..10000]of longint;
  last,total,i,p,j,k,t:longint;

procedure push_back(v:longint);
begin
  inc(total);
  step[total]:=v;
end;

procedure extend(ch:longint);
var
  p,np,q,nq:longint;
begin
  push_back(step[last]+1);
  p:=last;np:=total;
  while (son[p,ch]=0)and(p<>-1) do
  begin
    son[p,ch]:=np;
    p:=pre[p];
  end;
  if p=-1 then pre[np]:=0
  else
  begin
    q:=son[p,ch];
    if step[q]<>step[p]+1 then
    begin
      push_back(step[p]+1);
      nq:=total;
      pre[nq]:=pre[q];
      son[nq]:=son[q];
      pre[q]:=nq;
      pre[np]:=nq;
      while son[p,ch]=q do
      begin
        son[p,ch]:=nq;
        if p=0 then break;
        p:=pre[p];
      end;
    end
    else pre[np]:=q;
  end;
  last:=np;
end;

procedure build;
var
  i:longint;
begin
  total:=0;
  last:=0;
  fillchar(step,sizeof(step),0);
  fillchar(pre,sizeof(pre),0);
  fillchar(son,sizeof(son),0);
  pre[0]:=-1;
  for i:=1 to length(s) do
  extend(ord(s[i])-ord('a')+1);
  for i:=1 to length(s) do
  extend(ord(s[i])-ord('a')+1);
end;

begin
  readln(t);
  for k:=1 to t do
  begin
  readln(s);
  build;
  p:=0;
  for i:=1 to length(s) do
  for j:=1 to 26 do
  if son[p,j]<>0 then
  begin
    p:=son[p,j];
    break;
  end;
  writeln(step[p]-length(s)+1);
  end;
end.